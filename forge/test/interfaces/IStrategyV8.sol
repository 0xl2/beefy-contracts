// SPDX-License-Identifier: MIT
// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.6.6. SEE SOURCE BELOW. !!
pragma solidity >=0.7.0 <0.9.0;
pragma experimental ABIEncoderV2;

interface IBeefyVaultV8 {
    event ChargedFees(
        uint256 callFees,
        uint256 beefyFees,
        uint256 strategistFees
    );
    event Initialized(uint8 version);
    event OwnershipTransferred(
        address indexed previousOwner,
        address indexed newOwner
    );
    event Paused(address account);
    event SetBeefyFeeConfig(address beefyFeeConfig);
    event SetBeefyFeeRecipient(address beefyFeeRecipient);
    event SetKeeper(address keeper);
    event SetStratFeeId(uint256 feeId);
    event SetStrategist(address strategist);
    event SetUnirouter(address unirouter);
    event SetVault(address vault);
    event SetWithdrawalFee(uint256 withdrawalFee);
    event StratHarvest(
        address indexed harvester,
        uint256 wantHarvested,
        uint256 tvl
    );
    event Unpaused(address account);
    event Withdraw(uint256 tvl);

    function WITHDRAWAL_FEE_CAP() external view returns (uint256);

    function WITHDRAWAL_MAX() external view returns (uint256);

    function balanceOf() external view returns (uint256);

    function balanceOfPool() external view returns (uint256);

    function balanceOfWant() external view returns (uint256);

    function beefyFeeConfig() external view returns (address);

    function beefyFeeRecipient() external view returns (address);

    function beforeDeposit() external;

    function callReward() external view returns (uint256 nativeOut);

    function depositFee() external view returns (uint256);

    function getAllFees() external view returns (IFeeConfig.AllFees memory);

    function getStratFeeId() external view returns (uint256);

    function harvest() external;

    function keeper() external view returns (address);

    function lastHarvest() external view returns (uint256);

    function managerHarvest() external;

    function native() external view returns (address);

    function output() external view returns (address);

    function outputToWant() external view returns (address[] memory);

    function owner() external view returns (address);

    function pause() external;

    function paused() external view returns (bool);

    function renounceOwnership() external;

    function rewardsAvailable() external view returns (uint256);

    function setBeefyFeeConfig(address _beefyFeeConfig) external;

    function setBeefyFeeRecipient(address _beefyFeeRecipient) external;

    function setKeeper(address _keeper) external;

    function setStratFeeId(uint256 _feeId) external;

    function setStrategist(address _strategist) external;

    function setUnirouter(address _unirouter) external;

    function setVault(address _vault) external;

    function setWithdrawalFee(uint256 _fee) external;

    function strategist() external view returns (address);

    function tend() external;

    function transferOwnership(address newOwner) external;

    function unirouter() external view returns (address);

    function unpause() external;

    function vault() external view returns (address);

    function want() external view returns (address);

    function withdraw(uint256 amount) external returns (uint256 loss);

    function withdrawFee() external view returns (uint256);
}

interface IFeeConfig {
    struct AllFees {
        FeeCategory performance;
        uint256 deposit;
        uint256 withdraw;
    }

    struct FeeCategory {
        uint256 total;
        uint256 beefy;
        uint256 call;
        uint256 strategist;
        string label;
        bool active;
    }
}